<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Addressable热更新使用基础</title>
    <url>/zierc/2ebdb5f2.html</url>
    <content><![CDATA[<h2 id="热更新">热更新</h2>
<h3 id="资源热更新">资源热更新</h3>
<p>主要通过 AB 包来实现，比较简单。</p>
<h3 id="代码热更新">代码热更新</h3>
<p>csharp 代码打包以后就变成了二进制，和程序同时启动，无法修改。</p>
<p><img src="/zierc/2ebdb5f2/Untitled.png" alt></p>
<h3 id="热更新流程">热更新流程</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%201.png" alt></p>
<blockquote>
<p>MD5 值 用 md5 算法，生成资源对应的唯一标识符，有助于资源的增量打包</p>
<p><img src="/zierc/2ebdb5f2/Untitled%202.png" alt></p>
</blockquote>
<h2 id="代码热更新的手段">代码热更新的手段</h2>
<h3 id="Lua">Lua</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%203.png" alt></p>
<h3 id="ILRuntime">ILRuntime</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%204.png" alt></p>
<h3 id="puerts">puerts</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%205.png" alt></p>
<h3 id="HyBridCLR-huatuo">HyBridCLR(huatuo</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%206.png" alt></p>
<h2 id="AB-包"><s>AB 包</s></h2>
<h3 id="AssetsBundle-Browser"><s>AssetsBundle Browser</s></h3>
<h3 id="AssetsBundle-Browser-的安装"><s>AssetsBundle Browser 的安装</s></h3>
<p><s>目前 unity packagemanager 已经找不到这个插件了</s></p>
<p><s>需要到<a href="https://github.com/Unity-Technologies/AssetBundles-Browser"><strong>github</strong></a>去下载</s></p>
<p><s>建议使用建议使用 url 的下载方式：unity 编辑器 →Window→packmanager→Add→Url 输入 github 上的获取链接</s></p>
<h3 id="AssetsBundle-Browser-安装问题"><s>AssetsBundle Browser 安装问题</s></h3>
<p><s>报错：boo 找不到</s></p>
<p><s>这个 boo Unity 很久就不用了，并且这个报错的脚本在一个叫 Tests 的文件夹中，因此大概率是 unity 团队忘了维护，或者有其他的理由，总之直接把这个 tests 文件夹删了即可。</s></p>
<hr>
<h2 id="不再使用-abb">不再使用 abb</h2>
<p>突然发现 unity 官方已经不推荐使用 abb 了而是 addressables assets system（AA</p>
<p>所以现在来研究 AA</p>
<h2 id="AssetStudio">AssetStudio</h2>
<p>可以对未加密的 ab 包进行逆向工程，解析出资源。</p>
<p>但是我这里软件加载资源出问题了，无法预览，也无法导出。</p>
<h2 id="Addressables-Assets-System"><a href="https://blog.csdn.net/linxinfa/article/details/122390621">Addressables Assets System</a></h2>
<p>Unity 新的打包工具，支持加密（应该，<a href="http://xn--ciqxcs7mws2a.CN">之前有个.CN</a> 的加强版，现在找不到了，猜测是合并到一起了。）</p>
<h3 id="安装">安装</h3>
<p>直接到 package manager 里面 install 即可</p>
<h3 id="路径命名问题">路径命名问题</h3>
<p>使用 ab 包时，资源路径不能出现’[]’，建议使用’()’代替</p>
<p><img src="/zierc/2ebdb5f2/Untitled%207.png" alt></p>
<h3 id="两种不同的打包和加载方式">两种不同的打包和加载方式</h3>
<ol>
<li>包体内打包与加载</li>
<li>包体外打包与加载</li>
</ol>
<p>包体内我理解为打包到本地，加载则直接到本地的加载目录加载</p>
<p>包体外我理解为打包到服务器，加载则根据给定的服务器地址，进行加载（默认为本地</p>
<p><img src="/zierc/2ebdb5f2/Untitled%208.png" alt></p>
<p>包体内打包的方式，在项目构建后会被打包到游戏文件内部</p>
<p>包体外的则会在项目的 <code>ServerData/</code> 文件中</p>
<h3 id="打包">打包</h3>
<p><img src="/zierc/2ebdb5f2/Untitled%209.png" alt></p>
<p>点击即可按照设置进行打包</p>
<h3 id="报错">报错</h3>
<p>log 显示，有许多 unity 内置的模块居然找不到。<s>尝试换一个编译器版本。</s></p>
<p>尝试新建项目，发现可以用了，之前的项目出于某种原因，似乎坏掉了。</p>
<h3 id="加载资源">加载资源</h3>
<blockquote>
<p>tips:InstantiateAsync 函数可以直接将获取的资源实例化</p>
</blockquote>
<blockquote>
<p>资源加载时，不需要管是远程资源还是本地资源</p>
</blockquote>
<h4 id="加载方法">加载方法</h4>
<ol>
<li>通过 Addressable Name 加载</li>
</ol>
<blockquote>
<p>这种加载方式不需要管是本地资源包还是远程资源包</p>
</blockquote>
<p>代码如下:</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2010.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2011.png" alt></p>
<p>把这个脚本挂载到一个场景中的游戏物体即可</p>
<ol start="2">
<li>通过引用(AssetsReference)方式加载</li>
</ol>
<p>原理是通过弱引用获取资源，然后根据弱引用实例化</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2012.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2013.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2014.png" alt></p>
<h4 id="加载途径">加载途径</h4>
<ol>
<li>Use AssetDatabase</li>
</ol>
<p>这个就是直接加载资源，不是加载 ab 包，一般开发时就用这个就行，因为快。</p>
<ol start="2">
<li>Simulate Group</li>
</ol>
<p>在不打包的情况下，模拟 AssetBundle 的操作。这个模式下，可以通过分析器，查看资源加载状况，分析加载策略</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2015.png" alt></p>
<ol start="3">
<li>Use Exising Build</li>
</ol>
<p>这个模式则是真正的加载资源包</p>
<h3 id="加载远程资源">加载远程资源</h3>
<p>如果要在 editor 环境下进行测试，需要搭建 web 服务器。</p>
<p>可以使用 addressable 的 Hosting Services 工具</p>
<p>关于报错</p>
<p>要在 project settings/Player/Configuration 中 把 Allow download over HTTP* 选为允许。</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2016.png" alt></p>
<h3 id="打包模式和批量加载">打包模式和批量加载</h3>
<p>每个 Group 都可以单独设置打包模式</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2017.png" alt></p>
<p>三种模式，分别是 全部打进一个包中，全部分开打包，按照层级打包</p>
<p>第一个就是默认的，第二个所有资源都会单独打成一个 bundle 文件。</p>
<p>一般选第三个，将资源的层级设置好，就可以了，而且还能方便批量加载。</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2018.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2019.png" alt></p>
<blockquote>
<p>一个资源可以设置多个 lable</p>
</blockquote>
<p>批量加载，方法如下。</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2020.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2021.png" alt></p>
<blockquote>
<p>注意方法名变了。 Asset 和 Assets</p>
</blockquote>
<p><img src="/zierc/2ebdb5f2/Untitled%2022.png" alt></p>
<h3 id="打资源热更新包">打资源热更新包</h3>
<p>首先，要支持热更新，需要开启 Catalog</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2023.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2024.png" alt></p>
<p>设置好资源打包加载路径。</p>
<p>打包</p>
<p>可能会报错，提示端口被占用，这是因为刚刚在测试远程加载时，开启了这个端口，现在只要 reset 一下就行，这个端口会被重新打开</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2025.png" alt></p>
<p>现在打包出来的文件中，多了两个名为 catalog 的 .hash 和 . json 文件，用于增量打包时对比哪些文件发生了变化。</p>
<p>现在将 Group 中，一个需要替换的资源去除，然后将要替换的资源命名为相同的名字，加入到 Group 中，选择 Update a previous Build</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2026.png" alt></p>
<p>就会多一个更新包</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2027.png" alt></p>
<p>现在再加载，就会加载更新后的资源。</p>
<p>如果不更新，直接选择 Update… 就不会打新的包（亲测</p>
<h3 id="关于资源释放">关于资源释放</h3>
<p>要通过 Addressables.Release 释放加载 handle 或者加载的结果</p>
<p><img src="/zierc/2ebdb5f2/Untitled%2028.png" alt></p>
<p><img src="/zierc/2ebdb5f2/Untitled%2029.png" alt></p>
<h2 id="问题解决">问题解决</h2>
<blockquote>
<p>以下是教程中没有提及的内容，如果你要参考，建议先看<a href="https://blog.csdn.net/linxinfa/article/details/122390621">教程</a></p>
</blockquote>
<h3 id="首先是-unity-的设置问题，在-Player-的-Config-设置中，需要允许从-http-服务器下载资源">首先是 unity 的设置问题，在 Player 的 Config 设置中，需要允许从 http 服务器下载资源</h3>
<p><img src="/zierc/2ebdb5f2/Untitled30.png" alt></p>
<h3 id="然后是编辑器中-Addressable-asset-settings">然后是编辑器中 Addressable asset settings</h3>
<p>如果要实现热更新，必须开启 <code>Build remote catalog</code>功能</p>
<p>这个选项下面的 <code>Buid&amp;Load Paths</code> 指的是远程包对应的 catalog 的构建和加载路径路径</p>
<p><img src="/zierc/2ebdb5f2/Untitled31.png" alt></p>
<p>在构建项目，或者打包本地资源时，会输出两个同名文件 catalog，分别时.hash 和.json 后缀的文件。</p>
<p>勾选上述的 <code>Build Remote Catalog</code> 功能后，复制一份 catalog 作为你远程资源的目录，这份 catalog 的位置取决于你选择的路径。</p>
<p>个人理解，这份 catalog 应该作为最新的目录，放在服务器，用于进行资源更新对比。</p>
<p>构建游戏时，addressable 会自动打一次 local 包，同时将这些包作为游戏打包时的包内资源。</p>
<p>也就是说，游戏根目录中 streamingassets 文件中的资源，是由编辑器中所有 local 的 addressable 资源构成（包括所有 local 分组</p>
]]></content>
      <categories>
        <category>Unity技术</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Addressable进行资源管理</title>
    <url>/zierc/17643605.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>资源管理，最重要的就是资源加载和释放的时机和方法的把握。</p>
<p>就个人的理解而言，资源管理的时机是与项目严重耦合的。</p>
<p>Addressable通过提供异步加载，使得加载资源时，可以保持主线程的流畅运行，但是如果频繁的使用，依然会出现卡顿，因为它虽然使用多线程，但是cpu和内存的消耗是持续累加的，同时addressable内部通过一个队列管理加载操作，如果过于频繁，会导致队列过长，增加资源加载的延迟。<br>
而且不能等玩家到了需要资源的时候才加载（除非是新的章节或者关卡之类的），否则就算有异步也没什么意义。</p>
<p>这时可以通过预加载来实现空间换取时间的解决方案，但是何时进行，预加载什么资源就成为了关键问题。</p>
<p>个人推测正式的项目工作流中都会有专门的人员进行资源划分，然后给出资源加载的具体要求。</p>
<h2 id="思考">思考</h2>
<h3 id="加载资源">加载资源</h3>
<p>对我自己的项目，如何进行资源管理呢，拿音频资源作为例子，如果将所有的音音频资源放在同一Label中，通过异步加载为List&lt;Object&gt;，那么如果音音频很多而且品质要求高，这个list占用的内存会很大。在进入主界面时，我只需要播放主界面的背景音乐以及ui需要的音效，加载所有的音频显然冗余了。</p>
<p>此时出现了一些解决方案：</p>
<ul>
<li>将音频资源再按照场景划分，在加载场景时，预加载需要的音频</li>
<li>细化所有的音频，完全按需加载</li>
</ul>
<p>显然两个都有问题，前者问题在于，有些音频资源不会依赖场景，而是依赖其他的如人物，道具等。（如黑神话悟空中化身技的背景音乐）</p>
<p>后者问题更加明显了，完全放弃了资源预加载，当游戏中某些需要大量资源的时候，就可能会出现严重卡顿。</p>
<p>资源加载不太可能过于细分，一般都是批量加载可能会用到的资源。</p>
<p>所以，可以尝试将两者结合，那样也适用于我这小项目。<br>
addressable一个资源可以有多个标签，所以可以限制加载的资源数量，在场景加载时通过标签预加载可能需要的资源。</p>
<h3 id="释放资源">释放资源</h3>
<p>因为我的项目是2d游戏且比较小，一个场景中需要加载的资源总数不算太大，所以可以在每次场景转换时，将之前加载的资源全部释放。</p>
<h2 id="实现">实现</h2>
<p>需要一个类对Addressable的方法进行封装，并对资源进行批量管理。而细致的资源管理则交给addressable，因为对于已经加载的资源addressable是不会再次去磁盘加载的。<br>
这种方式还需要严格规范名称的使用。个人之前是比较反感使用string作为参数的，因为容易出错，但是很多情况下，string的灵活性好，而且做好规范，可以尽量避免错误。</p>
]]></content>
      <categories>
        <category>Unity技术</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+github静态托管搭建个人博客</title>
    <url>/zierc/2443647d.html</url>
    <content><![CDATA[<h2 id="网站搭建和主题配置">网站搭建和主题配置</h2>
<h3 id="请先看文章-小茗同学大佬的搭建教程">请先看文章:<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">小茗同学大佬的搭建教程</a></h3>
<h3 id="由于上文已经非常完善，笔者只提几点注意事项（均为笔者踩的坑）">由于上文已经非常完善，笔者只提几点注意事项（均为笔者踩的坑）</h3>
<ul>
<li>关于<code>_config.yml</code>中<code>deploy</code>的<code>branch</code>的配置，<code>master</code>要更换为<code>main</code></li>
<li>关于 url 配置，文章中没有提到，但是笔者在搭建时发现，<strong>url 对大小写要求很严格</strong>，如果你的 github 域名没有完全正确的填写，那么网站的样式是加载不出来的</li>
<li>CNAME 必须移到<code>source</code>文件夹中进行保留</li>
</ul>
<h2 id="链接永久化">链接永久化</h2>
<div class="note simple"><p>减少网页链接丢失，同时减少 url 的层级，对爬虫比较友好</p>
</div>
<h3 id="如何实现">如何实现</h3>
<p>下载插件<code>hexo-abbrlink</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>在根目录中的<code>_conflg.yml</code>中配置生成链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permalink: zierc/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>注意：上述代码中<code>zierc</code>为自定义内容，你想咋填咋填，但是会影响到关于<strong>图片位置生成的操作（hexo-asset-image 插件）</strong></p>
</div>
<p>由于<code>_config.yml</code>已经设置了 permalink， 这里重复设置，此时构建会报错，所以需要<strong>如下图</strong>一样注释一些默认的代码<br>
<img src="/zierc/2443647d/Snipaste_2024-04-12_09-48-39.png" alt></p>
<h3 id="如果你使用了hexo-asset-image">如果你使用了<code>hexo-asset-image</code></h3>
<p>由于 image 的路径设置是根据 hexo 框架原来的路径走的，所以此时你会发现构建出的网站，图片无法加载<br>
此时需要修改一下源码<br>
找到目录<code>node_modules\hexo-asset-image\index.js</code></p>
<ul>
<li>在大概第 12 行左右<code>var link = data.permalink;</code>后面添加如下代码，用于定义变量 abbrlink，当然，具体添加到哪里看你自己的喜好，笔者只是为了逻辑清晰</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abbrlink = data.abbrlink;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后在大概第 58 行左右，将代码<code>$(this).attr('src', config.root + link + src);</code>修改为<code> $(this).attr('src', config.root +'zierc/' +abbrlink +'/'+ src);</code><div class="note warning simple"><p>注意：此处回应前面的提示，修改之后的代码中<code>zierc</code>为自定义内容，你之前填的什么，现在就修改成什么</p>
</div>
</li>
</ul>
<p>之后为了防止一些奇怪的问题，直接 hexo 三件套就可以了</p>
<h2 id="双线部署">双线部署</h2>
<p>由于 github 部署访问太慢了<br>
所以添加一个国内的 coding 部署，提高访问速度</p>
<h3 id="如何实现-2">如何实现</h3>
<p>首先，请详细观看<a href="https://blog.juanertu.com">卷二兔</a>大佬的<a href="https://www.bilibili.com/video/BV1hF411v7e1/?vd_source=27f2b246cedeb85170372b3386cefa14">b 站视频教程</a>本文的实现主要是参考了这位大佬。当你观看视频时，可能会发现一些场景和视频中不同，这就是笔者在此的作用了</p>
<h4 id="deploy-配置">deploy 配置</h4>
<p><code>_config.yml</code>配置和视频中所示不同，经过笔者尝试，如果按照视频的格式配置，会出现腾讯云和 GitHub 都不会自动部署的问题，经过查看 hexo 的文档和各种资料，笔者得到以下成功的配置方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: &quot;git&quot;</span><br><span class="line">    repository: git@github.com:ZiercPro/ZiercPro.github.io.git</span><br><span class="line">    branch: main</span><br><span class="line">  - type: &quot;git&quot;</span><br><span class="line">    repository: coding仓库地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p>如果这个也无法帮助到你，那可能需要你移步了，对此笔者感到非常抱歉。</p>
<div class="note warning simple"><p>如果你发现该视频的方法不行，可以尝试另一位大佬的方法（笔者嫌麻烦没有尝试，但是这已经是笔者能找到的最新的方法了）<a href="https://www.cnblogs.com/Chen0495/p/17947479">文档链接-&gt;</a></p>
</div>
<h2 id="针对主题ButterFly遇到的问题">针对主题<a href="https://github.com/jerryc127/hexo-theme-butterfly">ButterFly</a>遇到的问题</h2>
<h3 id="主题不显示">主题不显示</h3>
<p>在切换主题之后，主题不显示，只显示一行文本：<br>
<code>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</code><br>
解决方案为：在根目录中执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>然后重新构建，并在本地测试即可<br>
如果还有什么问题请先运行<code>hexo clean</code> 之后再重新运行<code>hexo g</code></p>
<h3 id="设置背景图片">设置背景图片</h3>
<p>由于笔者没有仔细看 <code>_config.yml</code> 的选项，导致设置背景图片一直在网上寻找陈年方法，都没有效果，浪费了很多时间（4 小时）还没成功，后经过官方大佬点拨发现在<code>_config.yml</code>偏后半段，有<code>background</code>进行背景图片设置，如下图：<br>
<img src="/zierc/2443647d/Snipaste_2024-04-10_21-14-27.png" alt></p>
<div class="note simple"><p>因为 background 设置在比较后面，我并没有在官方文档中找到，所以不知道官方文档中有没有（肯定是有的），现身说法，望诸位不要像我一样犯傻</p>
</div>
<p>另附一张与官方大佬&quot;<strong>斗智斗勇</strong>&quot;的精彩画面。<s>望周知</s><br>
<img src="/zierc/2443647d/image.png" alt="我是傻逼"></p>
<h3 id="个性化鼠标指针样式">个性化鼠标指针样式</h3>
<p><a href>该鼠标样式原创博客</a></p>
<p>笔者不了解前端，只是自己加了个渐变色，这里直接给出自己的代码，不多做说明</p>
<div class="note default simple"><p>JS 代码</p>
</div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CURSOR</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">lerp</span> = <span class="function">(<span class="params">a, b, n</span>) =&gt;</span> (<span class="number">1</span> - n) * a + n * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyle</span> = (<span class="params">el, attr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">getComputedStyle</span></span><br><span class="line">      ? <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el)[attr]</span><br><span class="line">      : el.<span class="property">currentStyle</span>[attr];</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cursor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pos</span> = &#123; <span class="attr">curr</span>: <span class="literal">null</span>, <span class="attr">prev</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pt</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">create</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params">left, top</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">style</span>[<span class="string">&quot;left&quot;</span>] = <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">style</span>[<span class="string">&quot;top&quot;</span>] = <span class="string">`<span class="subst">$&#123;top&#125;</span>px`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">cursor</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">id</span> = <span class="string">&quot;cursor&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">cursor</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; el.<span class="property">length</span>; i++)</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStyle</span>(el[i], <span class="string">&quot;cursor&quot;</span>) == <span class="string">&quot;pointer&quot;</span>) <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">push</span>(el[i].<span class="property">outerHTML</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>((<span class="variable language_">this</span>.<span class="property">scr</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>)));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scr</span>.<span class="property">innerHTML</span> = <span class="string">`* &#123;cursor: url(&quot;data:image/svg+xml,&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; viewBox=&#x27;0 0 10 10&#x27; width=&#x27;12px&#x27; height=&#x27;12px&#x27;&gt;&lt;circle cx=&#x27;3&#x27; cy=&#x27;3&#x27; r=&#x27;6&#x27; opacity=&#x27;.3&#x27;/&gt;&lt;/svg&gt;&quot;) 1 1, auto&#125;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">refresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scr</span>.<span class="title function_">remove</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pos</span> = &#123; <span class="attr">curr</span>: <span class="literal">null</span>, <span class="attr">prev</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pt</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">create</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseover</span> = <span class="function">(<span class="params">e</span>) =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">includes</span>(e.<span class="property">target</span>.<span class="property">outerHTML</span>) &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseout</span> = <span class="function">(<span class="params">e</span>) =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">includes</span>(e.<span class="property">target</span>.<span class="property">outerHTML</span>) &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span> == <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">move</span>(e.<span class="property">clientX</span> - <span class="number">8</span>, e.<span class="property">clientY</span> - <span class="number">8</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span> = &#123; <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">8</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">8</span> &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseenter</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseleave</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmousedown</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">lerp</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>.<span class="property">x</span>, <span class="number">0.15</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="title function_">lerp</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>.<span class="property">y</span>, <span class="number">0.15</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">move</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">render</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable constant_">CURSOR</span> = <span class="keyword">new</span> <span class="title class_">Cursor</span>();</span><br><span class="line">  <span class="comment">// 需要重新获取列表时，使用 CURSOR.refresh()</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note default simple"><p>css 代码</p>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#cursor</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, <span class="number">#927aff</span>, <span class="number">#e22c72</span>, <span class="number">#4d20ee</span>, <span class="number">#42ff29</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: gradientBG <span class="number">8s</span> ease infinite;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.45</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10086</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition-property</span>: background, opacity, transform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> gradientBG &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.35</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>但是这个鼠标样式还有个小问题，那就是鼠标如果在复制代码的按钮上时，会变回原指针</p>
</div>
<h4 id="暂无解决方案">暂无解决方案</h4>
<p>按照原作者的意思，应该会检测元素中是否有<code>cursor:pointer</code> 于是笔者通过浏览器控制台，发现 copy 代码的按钮类名为<code>fas fa-paste copy-button</code><br>
于是笔者又去查看源码，发现在<code>highlight.styl</code>文件中，关于<code>copy-button</code>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.copy-button</span><br><span class="line">  position: absolute</span><br><span class="line">  right: 14px</span><br><span class="line">  cursor: pointer</span><br><span class="line">  transition: color .2s</span><br><span class="line"></span><br><span class="line">  &amp;:hover</span><br><span class="line">    color: $theme-color</span><br></pre></td></tr></table></figure>
<p>这让笔者一脸懵逼，理论上来说应该能检测到<code>cursor:pointer</code>的啊<br>
但是这些代码到底是什么意思，笔者也不知道，希望能有大佬来解决吧</p>
<div class="note info simple"><p>提一嘴，笔者专门去其他人的博客中对比了，似乎这个问题并不针对这款鼠标样式，其他鼠标样式修改方法，同样检测不到 copy 按钮，会恢复原鼠标样式</p>
</div>
<h3 id="想要自定义其他样式，可以参考Butterfly-官方文档-获取本站源码">想要自定义其他样式，可以参考<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 官方文档</a> | <a href="https://github.com/ZiercPro/ZiercPro.github.io"><code>获取本站源码</code></a></h3>
<h2 id="使用gitalk设置评论模块">使用<a href="https://github.com/gitalk/gitalk">gitalk</a>设置评论模块</h2>
<p>先找到 <a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">butterfly 文档</a>中的<code>评论</code>，它会让你跟随<a href="https://github.com/gitalk/gitalk">gitalk</a>的教程，内容简单易懂</p>
<h3 id="关于配置，笔者来帮忙避坑">关于配置，笔者来帮忙避坑</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意，到admin之前都需要加双引号，内容写到引号中</span><br><span class="line">gitalk:</span><br><span class="line">  client_id: &quot;&quot; #填写id</span><br><span class="line">  client_secret: &quot;&quot;#填写secret</span><br><span class="line">  repo: &quot;&quot;#填你的库名称，直接复制过来就可以了，笔者 使用的是托管网站的仓库，即ZiercPro.github.io</span><br><span class="line">  owner: &quot;&quot;#填写自己的github用户名，笔者就是ZiercPro</span><br><span class="line">  admin: [&quot;ZiercPro&quot;,&quot; &quot;,...]#填写能修改你仓库的人名，如果只是用于自己的博客网站，只需要和owner中填写的一样即可</span><br><span class="line">  option: #笔者没有设置</span><br></pre></td></tr></table></figure>
<h2 id="笔者的吐槽">笔者的吐槽</h2>
<p>笔者搭建过程中，一大感触就是，怎么感觉他们的过程和我的有点不一样，似乎很多文章都有点过时了。尽管最后，这些文章大概率依旧能够帮到笔者，但是总是会让笔者陷入混乱：这里到底该这样还是那样，为什么呢。当然，这个问题和有些<strong>平台或工具更新过快</strong>也脱不了关系。<br>
所以笔者也在在本文顶部预先提醒读者，注意本文的时效性，可能一小段时间后，这篇文章就已经不能食用了，如果你发现这篇文章已经是数年前的古董，那还是找一篇更新的教程来看吧</p>
<h2 id="结语">结语</h2>
<p>这是笔者第一篇文章，诸多问题，不用谅解，直接来找我私聊即可（<br>
如果有什么问题，可以发表评论或者通过各种渠道找我</p>
<p>参考文献：<br>
<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">小茗大佬 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br>
<a href="https://www.jianshu.com/p/aa936a8369fb">主题不显示问题 https://www.jianshu.com/p/aa936a8369fb</a><br>
<a href="https://www.drflower.top/posts/5920b38e/">花桑大佬 https://www.drflower.top/posts/5920b38e/</a><br>
<a href="https://blog.juanertu.com">卷二兔大佬 https://blog.juanertu.com</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏设计学习笔记</title>
    <url>/zierc/28626d28.html</url>
    <content><![CDATA[<div class="note info simple"><p>更新中</p>
</div>
<h2 id="前言">前言</h2>
<p>这个系列旨在记录笔者在学习游戏设计过程中的心得，同时能够将想法分享读者。</p>
<h2 id="游戏剧情">游戏剧情</h2>
<h3 id="剧情三角原则">剧情三角原则</h3>
<p>在撰写游戏故事的时候，一般要关注三个方面，即<strong>角色</strong>、<strong>事件</strong>、<strong>世界</strong>，并且最好只侧重其中之一，否则会使得玩家感到不舒服</p>
<h2 id="游戏文档">游戏文档</h2>
<p>游戏文档可以针对不同的群体，也会因此导致其侧重点不同<br>
比如你写给开发人员，那么文档就会注重一些玩法细节，如果是写给发行商负责人，那么可能就要多填充一些能激起他们兴趣的概念图，以及一些吸引人的游戏玩法<br>
游戏文档的目的是为了沟通，这就揭示了编写游戏文档的原则—<strong>可读性</strong>。</p>
<h3 id="单页说明">单页说明</h3>
<ul>
<li>游戏名</li>
<li>游戏系统</li>
<li>目标玩家年龄</li>
<li>ESRB 分级
<ul>
<li>eC 幼儿</li>
<li>e 所有人</li>
<li>e10 10 岁以上的所有人</li>
<li>t 青少年 含有少量暴力 暗示性主题及脏话</li>
<li>m 17 岁以上 含有明显的暴力，血腥，暗示性主题</li>
<li>AO 18 岁以上 含有明显暴力，血腥，暗示性主题并含有明显的性和裸露场景</li>
</ul>
</li>
</ul>
<h3 id="十页说明">十页说明</h3>
<h3 id="游戏流程">游戏流程</h3>
<h3 id="游戏设计文档">游戏设计文档</h3>
<h2 id="参考文献">参考文献:</h2>
<ul>
<li>《通关！游戏设计之道》</li>
</ul>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>八股文之排序算法</title>
    <url>/zierc/14ace8e0.html</url>
    <content><![CDATA[<div class="note info simple"><p>更新中</p>
</div>
<h1>参考文献</h1>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/75">阿里五面：说下希尔排序的过程？ 希尔排序的时间复杂度和空间复杂度又是多少？</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="https://www.cnblogs.com/tuyang1129/p/12857821.html">快速排序和归并排序的时间复杂度分析——通俗易懂</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="https://www.hello-algo.com/chapter_sorting/">hello 算法</a></td>
</tr>
</tbody>
</table>
<h1>比较排序</h1>
<h2 id="简单排序">简单排序</h2>
<h3 id="冒泡排序">冒泡排序</h3>
<p>经典的排序，实现和理解都很容易<br>
思路：从数列最左端开始，依次比较相邻两数，按照需求，进行位置交换，比如要求从小到大，当左数比右数大时，两数交换，最终在最右端能得到<strong>当前乱序数列中</strong>最大的数。之后重复之前的操作，乱序数列不断减少<br>
实现：双循环，每完成一次小循环，减少小循环次数。注意比较的次数为数列长度减一。</p>
<ul>
<li>
<p>数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>代码</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BubbleSort</span>(<span class="params"><span class="built_in">int</span>[] array</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//外循环乱序数列[0,i]</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = array.Length - <span class="number">1</span>; i&gt;<span class="number">0</span> ; i--)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//内循环[0,i]将最大值移动到最后一位</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//如果比下一位大，则交换</span></span><br><span class="line">              <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">                  (array[j], array[j + <span class="number">1</span>]) = (array[j + <span class="number">1</span>], array[j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序">选择排序</h3>
<p>还是很经典<br>
思路：从乱序中，按照要求，选择最大或者最小值，在遍历完当前乱序数列后，将记录的最值放入有序数列中，乱序数列不断缩短，最后变为有序数列<br>
实现：双循环，用局部变量分别记录最值的指针位置和数值，在循环结束后，比较最值指针和当前头部指针，如果相同，说明不需要交换直接进行下一次选择，否则交换两数，然后头部指针后移。因为开始要有个默认的最值，所以大循环的次数为 n-1(n 为数列长度)</p>
<ul>
<li>
<p>数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">不稳定</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>代码</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectionSort</span>(<span class="params"><span class="built_in">int</span>[] array</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.Length - <span class="number">1</span>; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">int</span> tempMin = array[i]; <span class="comment">//设当前指针所在位置为最小值，这个值可以没有，不过后面如果没有别的算法，就需要一个局部变量储存一个值</span></span><br><span class="line">           <span class="built_in">int</span> tempIndex = i; <span class="comment">//设当前指针为最小值所在指针</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//从当前后一位开始，比较到最后一位</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; array.Length; j++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//如果当前数比记录的最小数都小，那就更新最小数和最小数指针</span></span><br><span class="line">               <span class="keyword">if</span> (tempMin &gt; array[j])</span><br><span class="line">               &#123;</span><br><span class="line">                   tempMin = array[j];</span><br><span class="line">                   tempIndex = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果没变 就不用交换</span></span><br><span class="line">           <span class="keyword">if</span> (tempIndex == i)</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果变了，交换当前和记录的最小数</span></span><br><span class="line">           (array[i], array[tempIndex]) = (array[tempIndex], array[i]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入排序">插入排序</h3>
<p>希尔排序会用到，见<a href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">进阶排序/希尔排序</a><br>
思路：扑克牌，从乱序数列中，抽一张，根据需求，插入到有序数列中<br>
实现：默认乱序中第一个数为有序数列，从第二个数开始，向其中插数，与有序数列中的数依次比较，如果比当前有序数列被比较的数小，那么有序数列中的数向后移，直到找到合适的位置，将待插入的数插入。</p>
<div class="note info simple"><p>如果在 <code>for</code> 循环语句中写条件，注意条件顺序，不然会出现指针超出范围的 bug</p>
</div>
<ul>
<li>数据
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</li>
<li>代码</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertSort</span>(<span class="params"><span class="built_in">int</span>[] array</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">int</span> currentValue; <span class="comment">//当前要插入的数</span></span><br><span class="line">       <span class="built_in">int</span> i;</span><br><span class="line">       <span class="built_in">int</span> j;</span><br><span class="line">       <span class="comment">//默认第一个数已经处于有序数组当中</span></span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; array.Length; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           currentValue = array[i];</span><br><span class="line">           <span class="comment">//每次循环都新加一个数到有序数组，如果插入数比有序序列中当前值小，则有序序列数值前移 注意这里写入条件的顺序</span></span><br><span class="line">           <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; currentValue &lt; array[j - <span class="number">1</span>]; j--)</span><br><span class="line">               array[j] = array[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">           <span class="comment">//结束之后，当前位置为要插入数的合适位置</span></span><br><span class="line">           array[j] = currentValue;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="进阶排序">进阶排序</h2>
<h3 id="希尔排序">希尔排序</h3>
<p>又叫缩小增量排序<br>
1959 年 Shell 发明，第一个突破 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的排序算法，是简单<a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a>的改进版。它与插入排序的不同之处在于，<strong>它会优先比较距离较远的元素</strong>，通过不断分组，提高插入排序的效率。<strong>希尔排序的时间复杂度与增量序列的选取有关，所以希尔排序在中等大小规模表现良好，对规模非常大的数据排序不是最优选择。<strong>笔者个人对于希尔还有个理解，就是它</strong>和归并排序操作类似</strong>，因为下一次分组总会把上一次包裹进来，并且进行整合，就类似归并排序先分组，后将组归并。<br>
思路：按照间隔分组，间隔一般默认初始为数组长度/2，然后分别对每组进行插入排序<br>
实现：三层循环，每次循环结束，重新计算间隔。注意这里插入排序是对每组<strong>依次分段进行</strong>插入排序，不是一次性对单独某个组的一整段进行插入排序。</p>
<div class="note warning simple"><p>这个数据网上中说纷纭，笔者也不能判断真伪，建议读者自行查阅<br>
<a href="https://www.cnblogs.com/chengxiao/p/6104371.html">图解排序算法(二)之希尔排序</a><br>
<a href="https://www.runoob.com/data-structures/shell-sort.html">菜鸟教程</a></p>
</div>
<ul>
<li>
<p>数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.25</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log^2 n)/O(n^{1.25})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.25</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{1.5} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">不稳定</td>
</tr>
</tbody>
</table>
<div class="note info simple"><p>希尔排序，如果用希尔增量序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2....1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n/2,(n/2)/2....1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span><span class="mord">/2....1</span><span class="mclose">)</span></span></span></span>，能使其时间复杂度达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。一些经过优化的增量序列如 Hibbard 经过复杂证明可使得最坏时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{1.5})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
</div>
</li>
<li>
<p>代码</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShellSort</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> interval</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">int</span> currentInterval; <span class="comment">//当前间隔</span></span><br><span class="line">      <span class="built_in">int</span> index; <span class="comment">//总指针</span></span><br><span class="line">      <span class="built_in">int</span> subIndex; <span class="comment">//每组指针</span></span><br><span class="line">      <span class="built_in">int</span> insertSortValue; <span class="comment">//插入算法当前值</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//缩小增量</span></span><br><span class="line">      <span class="keyword">for</span> (currentInterval = interval / <span class="number">2</span>; currentInterval &gt; <span class="number">0</span>; currentInterval /= <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//每组进行多次插入排序</span></span><br><span class="line">          <span class="keyword">for</span> (index = currentInterval; index &lt; interval; index++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//要插入的值</span></span><br><span class="line">              insertSortValue = array[index];</span><br><span class="line">              <span class="comment">//如果指针在有序区外，且要插入的值比前一个数要小，数组的值前移</span></span><br><span class="line">              <span class="keyword">for</span> (subIndex = index;</span><br><span class="line">                   subIndex &gt;= currentInterval &amp;&amp; insertSortValue &lt; array[subIndex - currentInterval];</span><br><span class="line">                   subIndex -= currentInterval)</span><br><span class="line">                  array[subIndex] = array[subIndex - currentInterval];</span><br><span class="line"></span><br><span class="line">              <span class="comment">//结束之后，说明该位置的值小于插入值</span></span><br><span class="line">              array[subIndex] = insertSortValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序">快速排序</h3>
<p>采取分治思想（归并排序也用到了分治），运用比较广泛<br>
思路：通过轴数，将数组分区，然后对分区再次取轴数，再分区，如此往复，直到分区长度为 1，即为有序数列<br>
实现：先选取轴数，一般默认为数列首位，然后分区，比轴数小的放在轴数左边，大的放在轴数右边，这一步采取双指针，当左右指针重合时，该位置即为轴数应该放置的位置。之后用过递归，再次对两个分区进行取轴分区<br>
<strong>注意，分区后，轴数不能再包含在分区中</strong></p>
<ul>
<li>
<p>数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">不稳定</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>代码</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//如果已经重合，就不需要再排序了</span></span><br><span class="line">      <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">int</span> pivot = GetPivot(array, left, right); <span class="comment">//先排序确认中轴数的位置</span></span><br><span class="line">      QuickSort(array, left, pivot - <span class="number">1</span>); <span class="comment">//左半边继续排序</span></span><br><span class="line">      QuickSort(array, pivot + <span class="number">1</span>, right); <span class="comment">//右半边继续排序</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//排列并获取轴数指针位置</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetPivot</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//默认左指针为中轴数，同时也相当于左指针取数</span></span><br><span class="line">      <span class="built_in">int</span> pivotNum = array[left];</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//右指针移动</span></span><br><span class="line">          <span class="keyword">while</span> (array[right] &gt;= pivotNum &amp;&amp; left &lt; right)</span><br><span class="line">          &#123;</span><br><span class="line">              right--;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//右指针停止移动，此时左指针指向的的数应该已经无效</span></span><br><span class="line">          <span class="keyword">if</span> (left &lt; right) array[left] = array[right];</span><br><span class="line"></span><br><span class="line">          <span class="comment">//左指针移动</span></span><br><span class="line">          <span class="keyword">while</span> (array[left] &lt; pivotNum &amp;&amp; left &lt; right)</span><br><span class="line">          &#123;</span><br><span class="line">              left++;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//左指针停止移动，此时右指针指向的数应该已经无效</span></span><br><span class="line">          <span class="keyword">if</span> (left &lt; right) array[right] = array[left];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//排序结束，把pivot归位</span></span><br><span class="line">      array[left] = pivotNum;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//返回左指针或者右指针</span></span><br><span class="line">      <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="归并排序">归并排序</h3>
<p>基于分治策略，操作类似完全二叉树的后续遍历。<br>
思路：将数组不断二分，知道得到长度为 1 的有序数列，然后归并有序数列<br>
实现：通过递归，不断二分，左右指针重合，即长度为 1 时，不再二分，开始归并，归并通过双指针，比较两边有序数列的最小位，将更小的一遍填入临时数组，并后移对应边的指针，继续比较，当任一指针到达其数组的尾部，结束比较，将剩余部分直接全部分配的临时数组，最后将临时数组的值，分配给原数组<br>
归并排序对<strong>链表排序</strong>有优势，因为可以将一些需要分配临时空间的操作省去，减少空间复杂度</p>
<ul>
<li>
<p>数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">算法稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>代码</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MergeSort</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//如果长度已经到达1，已经是有序状态了，就直接返回</span></span><br><span class="line">       <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">       <span class="comment">//如果长度大于1，则二分并排序</span></span><br><span class="line">       <span class="built_in">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       MergeSort(array, left, mid); <span class="comment">//左半边</span></span><br><span class="line">       MergeSort(array, mid + <span class="number">1</span>, array.Length - <span class="number">1</span>); <span class="comment">//右半边</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//经过二分得到两边都是有序数列，开始归并</span></span><br><span class="line">       Merge(array, left, right);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//归并</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Merge</span>(<span class="params"><span class="built_in">int</span>[] array, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">int</span> i = left; <span class="comment">//左半边指针</span></span><br><span class="line">       <span class="built_in">int</span> mid = (left + right) / <span class="number">2</span>; <span class="comment">//中间指针</span></span><br><span class="line">       <span class="built_in">int</span> j = mid + <span class="number">1</span>; <span class="comment">//右半边指针</span></span><br><span class="line">       <span class="built_in">int</span> length = right - left + <span class="number">1</span>; <span class="comment">//数组长度</span></span><br><span class="line">       <span class="built_in">int</span>[] temp = <span class="keyword">new</span> <span class="built_in">int</span>[length]; <span class="comment">//创建一个临时数组</span></span><br><span class="line">       <span class="built_in">int</span> t = <span class="number">0</span>; <span class="comment">//临时数组的指针</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//一次比较两个数组中最小的数，并赋值给临时数组</span></span><br><span class="line">           <span class="keyword">if</span> (array[i] &lt;= array[j])</span><br><span class="line">           &#123;</span><br><span class="line">               temp[t++] = array[i++];</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (array[i] &gt; array[j])</span><br><span class="line">           &#123;</span><br><span class="line">               temp[t++] = array[j++];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将左半边剩余的数复制给临时数组</span></span><br><span class="line">       <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">       &#123;</span><br><span class="line">           temp[t++] = array[i++];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将右半边剩余的值复制给临时数组</span></span><br><span class="line">       <span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">       &#123;</span><br><span class="line">           temp[t++] = array[j++];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将临时数组的值复制给目标数组</span></span><br><span class="line">       t = <span class="number">0</span>;</span><br><span class="line">       i = left;</span><br><span class="line">       <span class="keyword">while</span> (t &lt; length)</span><br><span class="line">       &#123;</span><br><span class="line">           array[i++] = temp[t++];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1>非比较排序</h1>
]]></content>
      <categories>
        <category>八股文系列</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏代码设计模式学习路线与思路</title>
    <url>/zierc/a2617f52.html</url>
    <content><![CDATA[<div class="note info simple"><p>更新中</p>
</div>
<h2 id="学习设计模式之前">学习设计模式之前</h2>
<p>先学习软件开发的基本原则，虽说笔者主攻方向为基于 Unity 引擎的游戏开发，但是游戏开发与软件开发有许多共通处，掌握学习游戏设计模式可以为后续开发与工具的学习运用打下坚实的基础</p>
<h3 id="软件设计的原则">软件设计的原则</h3>
<ul>
<li>单一职责原则（SRP）</li>
<li>开闭原则（OCP）</li>
<li>里氏替换原则（LSP）</li>
<li>依赖倒置原则（DIP）</li>
<li>接口隔离原则（ISP）</li>
<li>迪米特法则（LOD）</li>
<li>合成/聚合复用原则（CARP）</li>
</ul>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>租房日志</title>
    <url>/zierc/cb604593.html</url>
    <content><![CDATA[<p>2024年9月，我已经到了大三，因为各种原因，选择在校外不远处的街道租房。</p>
<h2 id="准备工作">准备工作</h2>
<p>第一次租房，没有经验，很多方面没有考虑到。<br>
房源来自也在附近租房的朋友介绍的一个二手房东（后用奸商代替），在上学期即将毕业时，和他谈好房价和位置，然后对方就要求给租金，理由是帮我预留房间。由于当时已经商量好了明确的时间和位置，我也问过我妈租金是否合理并得到肯定的答复（我妈以为我实地看过房了），所以我就毫不犹豫的将租金上交…因为即将回家，甚至房都没看（只看了视频）</p>
<h2 id="被坑">被坑</h2>
<p>等到开学，来到奸商介绍的位置，发现和视频中不是同一间，我便询问，结果他说帮我换了一个，比之前的大（能看出来确实比之前的大，但是只是厕所大了点，没什么用）。<br>
我立即询问是不是房租也贵了，结果不出所料，比之前的贵了100。此时我已经搬了一部分行李了，也知道已经掉到了坑里，能预见他后续会如何解释只能租这间，所以只能和他拉扯价格。然而我刚说最多比之前贵50，他就答应了…唉…我***。</p>
<p>然而还没结束，房租贵了也就罢了，他承诺说200兆宽带，我怎么也想不到，居然是几人共用200兆，等我发现网速有问题时，已经预付了一年的网费了（不长记性…）。<br>
只能在签租凭合同的时候，要求退房时返还剩余的房费，并且让他派人来往我房间装个路由器，分100兆进来。<br>
那个他让来修的人和他自然也是一伙的，除了给我打了个电话说过一天来，就没消息了（搞笑的是，除了宽带的事，我还叫他让人来修马桶冲水按钮，结果那个师傅第二天上午就来了，三两下就修好了，呵呵…）。<br>
最后我也是自己重新找营业厅办理了1000兆宽带，除了自己买路由器的钱，算下来就70每月。<br>
说到租凭合同，签的时候我就要求，只签4个月，但是他说必须一年，如果走了可以让他转租出去。这坑死人的地方要我住一年，多少有点搞笑了。所以我要求在附加合同上添加如果我4个月之后走人，必须退还押金和网费。不知道这个租凭合同到时能否帮我拿回押金。能预见的是，到时候又是一场“血战”。<br>
这个奸商，到了他手上的钱，不会轻易让你拿回来。</p>
<h2 id="尾声">尾声</h2>
<p>一直呆在象牙塔中，感觉自己嫩的像一株刚破土的芽儿。<br>
只是租房就被坑的无语凝噎，只能说只要涉及到钱的事情，就不会简单。<br>
希望这次教训能在脑海中停留久一点，下次这种时候长长记性。</p>
]]></content>
      <categories>
        <category>个人日志</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>画展</title>
    <url>/gallery/index.html</url>
    <content><![CDATA[<div class="gallery-group-main">
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src="https://s2.loli.net/2024/04/11/5EfvsRmwIqp1QJt.png" alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">米山舞</div>
  <p>大大我爱你</p>
  <a href="/%E4%B8%AA%E4%BA%BA%E7%94%BB%E5%BB%8A"></a>
  </figcaption>
  </figure>
  
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src="https://s2.loli.net/2024/04/11/LgwBTIWvzUcHQ24.png" alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">个人</div>
  <p>不会画画的渣渣</p>
  <a href="/./%E4%B8%AA%E4%BA%BA%E7%94%BB%E5%BB%8A"></a>
  </figcaption>
  </figure>
  
</div>
]]></content>
  </entry>
  <entry>
    <title>有幸相遇</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>个人画廊</title>
    <url>/%E4%B8%AA%E4%BA%BA%E7%94%BB%E5%BB%8A/index.html</url>
    <content><![CDATA[<div class="gallery-container" data-type="data" data-button>
      <div class="gallery-data">[{"url":"./头像.png","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>
<div class="gallery-container" data-type="data" data-button>
      <div class="gallery-data">[{"url":"./女死神.png","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>
<div class="gallery-container" data-type="data" data-button>
      <div class="gallery-data">[{"url":"./川崎和奥寺.png","alt":""},{"url":"./练习11.20.png","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>
<div class="gallery-container" data-type="data" data-button>
      <div class="gallery-data">[{"url":"./群草.png","alt":""},{"url":"./风.png","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>
]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
